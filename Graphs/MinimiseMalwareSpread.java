import java.util.*;

public class MinimiseMalwareSpread {
    class UnionFind{
        int[] par;
        int[] size;
        
        UnionFind(int n){
            par = new int[n];
            for(int i = 0; i < n; i++){
                par[i] = i;
            }
            
            size = new int[n];
            Arrays.fill(size,1);
        }
        
        int find(int x){
            if(x == par[x]) return x;
            par[x] = find(par[x]);
            return par[x];
        }
        
        void union(int x, int y){
            
            int par1 = find(x);
            int par2 = find(y);
            
            // par[par2] = par1;
            // size[par1] += size[par2];
            
            if(size[par1] > size[par2]){
                par[par2] = par1;
                size[par1] += size[par2];
            }else{
                par[par1] = par2;
                size[par2] += size[par1];
            }
            
            // for(int c: par){
            //     System.out.print(c + ", ");
            // }
            // System.out.println();
            
        }
    }
    
    public int minMalwareSpread(int[][] graph, int[] initial) {
        
        if(graph.length == 0 || initial.length == 0) return 0;
        
        UnionFind uf = new UnionFind(graph.length);
        
        for(int i = 0; i < graph.length; i++){
            for(int j = 0; j < i; j++){
                if(graph[i][j] == 1){
                    // System.out.println(i + ", " + j);
                    uf.union(i,j);
                }
            }
        }
        
        // for(int c: uf.par){
        //     System.out.print(c + ", ");
        // }
        // System.out.println();
        
        
        int[] count = new int[graph.length];
        for (int i: initial)
            count[uf.find(i)]++;
        
        // for(int c: uf.size){
        //     System.out.println(c);
        // }
        
        int ans = -1;
        int max = -1;
        
        for(int i: initial){
            int root = uf.find(i);
            if(count[root] == 1){
                int size = uf.size[root];
                 // System.out.println(size);
                if(size > max){
                    max = size;
                    ans = i;
                }else if(size == max && i < ans){
                    ans = i;
                }   
            }
        }
        
        //  for(int c: uf.par){
        //     System.out.print(c + ", ");
        // }
        // System.out.println();
        
        // System.out.println(ans);
        
        if (ans == -1) {
            ans = Integer.MAX_VALUE;
            for (int node: initial)
                ans = Math.min(ans, node);
        }
        return ans;
    }
}
